# -*- coding: utf-8 -*-
"""fft_analysis_to_py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K6Z5oACZt7uedFRUsawq-xHBquRR7-uB
"""

'''
fft_analysis.py

Fourier-based frequency domain analysis on binary images to enhance shape structure.
'''

import cv2
import numpy as np
from pathlib import Path

def fft_filter_image(img, radius =60):
    """
      Apply a band-pass filter using FFT to enhance shape details.

      Args:
          binary_image (np.ndarray): Binary image (uint8, values 0 or 255).
          low_cutoff (int): Inner radius (low frequencies to remove).
          high_cutoff (int): Outer radius (high frequencies to remove).

      Returns:
          np.ndarray: Processed image in spatial domain (float32).
      """

    #Normalize the image to 0-1
    img = img.astype(np.float32) / 255.0

    #Apply 2D FFT and shift
    f = np.fft.fft2(img)
    fshift = np.fft.fftshift(f)
    magnitude_spectrum = 20*np.log(np.abs(fshift) + 1e-8 )

    #Create a mask (band-pass filter)
    rows, cols = img.shape
    crow, ccol = rows // 2, cols // 2
    mask = np.zeros((rows, cols), np.uint8)
    cv2.circle(mask, (ccol, crow), radius, 1, thickness=-1)

    #Apply the mask and inverse FFT
    fshift_filtered = fshift * mask
    f_ishift = np.fft.ifftshift(fshift_filtered)
    img_back = np.fft.ifft2(f_ishift)
    img_back = np.abs(img_back)

    #Normalize result
    img_back = cv2.normalize(img_back, None, 0, 255, cv2.NORM_MINMAX)
    img_back = img_back.astype(np.uint8)

    return img_back